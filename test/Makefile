## A sample Makefile for building both Google Mock and Google Test and
## using them in user tests.  This file is self-contained, so you don't
## need to use the Makefile in Google Test's source tree.  Please tweak
## it to suit your environment and project.  You may want to move it to
## your project's root directory.
##
## SYNOPSIS:
##
##   make [all]  - makes everything.
##   make TARGET - makes the given target.
##   make clean  - removes all files generated by make.
#
## Please tweak the following variable definitions as needed by your
## project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use
## in your own targets but shouldn't modify.
## Points to the root of Google Test, relative to where this file is.
## Remember to tweak this if you move this file, or if you want to use
## a copy of Google Test at a different location.
#GTEST_DIR = ../Google_tests/lib/googletest/googletest
#
## Where to find user code.
#USER_DIR = .
#
## Flags passed to the preprocessor.
## Set Google Test's header directory as a system directory, such that
## the compiler doesn't generate warnings in Google Test headers.
#CPPFLAGS += -isystem $(GTEST_DIR)/include
#
## Flags passed to the C++ compiler.
#CXXFLAGS += -g -Wall -Wextra -pthread
#
## All tests produced by this Makefile.  Remember to add new tests you
## created to the list.
#TESTS = test
#
## All Google Test headers.  Usually you shouldn't change this
## definition.
#GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
#                $(GTEST_DIR)/include/gtest/internal/*.h
#
#CALCULATOR_HEADERS = ../src/calculator/*.h
#
## House-keeping build targets.
#all : $(TESTS)
#
#clean :
#	rm -f $(TESTS) gtest.a gtest_main.a *.o
#
## Builds gmock.a and gmock_main.a.  These libraries contain both
## Google Mock and Google Test.  A test should link with either gmock.a
## or gmock_main.a, depending on whether it defines its own main()
## function.  It's fine if your test only uses features from Google
## Test (and not Google Mock).
## Usually you shouldn't tweak such internal variables, indicated by a
## trailing _.
#GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
## For simplicity and to avoid depending on implementation details of
## Google Mock and Google Test, the dependencies specified below are
## conservative and not optimized.  This is fine as Google Mock and
## Google Test compile fast and for ordinary users their source rarely
## changes.
#gtest-all.o : $(GTEST_SRCS_)
#	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
#            $(GTEST_DIR)/src/gtest-all.cc
#
#gtest_main.o : $(GTEST_SRCS_)
#	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
#            $(GTEST_DIR)/src/gtest_main.cc
#
#gtest.a : gtest-all.o
#	$(AR) $(ARFLAGS) $@ $^
#
#gtest_main.a : gtest-all.o gtest_main.o
#	$(AR) $(ARFLAGS) $@ $^
#
## Builds a sample test.
#test_calculator.o : $(USER_DIR)/test.cpp $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test.cpp
#
#test_calculator : test_calculator.o gtest_main.a
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

MAKEFLAGS += --no-print-directory

test:
	cmake ../Google_tests/CMakeLists.txt
	cd ../Google_tests && make
	cd ../Google_tests && ./Google_Tests_run

clean:
	cmake --build ../Google_tests --target clean
	@echo "CMake build cleaned"